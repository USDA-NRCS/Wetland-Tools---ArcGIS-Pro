aprx = arcpy.mp.ArcGISProject("CURRENT")
activeMap = aprx.activeMap
activeMapName = activeMap.name
activeMapName
activeMapSR = activeMap.getDefinition('V2').spatialReference['latestWkid']
activeMapSR
outSpatialRef = arcpy.SpatialReference(activeMapSR)
outSpatialRef
outSpatialRef.name
import urllib
from urllib.request import Reqeust, urlopen
from urllib.request import Request, urlopen
from urllib.error import HTTPError as httErrors
urllibEncode = urllib.parse.urlencode
urllilbEncode
urllibEncode
parseQueryString = urllib.parse.parse_qsl
cluRESTurl_Metadata = """https://gis.sc.egov.usda.gov/appserver/rest/services/common_land_units/common_land_units/FeatureServer/0"""
cluRESTurl_Metadata
params = urllibEncode({'f': 'json','token': portalToken['token']})
nrcsPortal = 'https://gis.sc.egov.usda.gov/portal/'
nrcsPortal
def getPortalTokenInfo(portalURL):     try:         # Returns the URL of the active Portal         # i.e. 'https://gis.sc.egov.usda.gov/portal/'         activePortal = arcpy.GetActivePortalURL()          # {'SSL_enabled': False, 'portal_version': 6.1, 'role': '', 'organization': '', 'organization_type': ''}         #portalInfo = arcpy.GetPortalInfo(activePortal)          # targeted portal is NOT set as default         if activePortal != portalURL:                 # List of managed portals                managedPortals = arcpy.ListPortalURLs()                 # portalURL is available in managed list                if activePortal in managedPortals:                    AddMsgAndPrint("\nYour Active portal is set to: " + activePortal,2)                    AddMsgAndPrint("Set your active portal and sign into: " + portalURL,2)                    return False                 # portalURL must first be added to list of managed portals                else:                     AddMsgAndPrint("\nYou must add " + portalURL + " to your list of managed portals",2)                     AddMsgAndPrint("Open the Portals Tab to manage portal connections",2)                     AddMsgAndPrint("For more information visit the following ArcGIS Pro documentation:",2)                     AddMsgAndPrint("https://pro.arcgis.com/en/pro-app/help/projects/manage-portal-connections-from-arcgis-pro.htm",1)                     return False          # targeted Portal is correct; try to generate token         else:              # Get Token information             tokenInfo = arcpy.GetSigninToken()              # Not signed in.  Token results are empty             if not tokenInfo:                 AddMsgAndPrint("\nYou are not signed into: " + portalURL,2)                 return False              # Token generated successfully             else:                 return tokenInfo      except:         errorMsg()         return False
portalToken = getPortalTokenInfo(nrcsPortal)
params = urllibEncode({'f': 'json','token': portalToken['token']})
params
def submitFSquery(url,INparams):     # This function will send a spatial query to a web feature service and convert the results into a python     # structure.  If the results from the service is an error due to an invalid token then a second attempt will     # be sent with using a newly generated arcgis token.  If the token is good but the request returned with an     # error a second attempt will be made.  The function takes in 2 parameters, the URL to the web service and a     # query string in URLencoded format.      # Error produced with invalid token     # {u'error': {u'code': 498, u'details': [], u'message': u'Invalid Token'}}      # The function returns requested data via a python dictionary      try:         # Data should be in bytes; new in Python 3.6         INparams = INparams.encode('ascii')         resp = urllib.request.urlopen(url,INparams)  # A failure here will probably throw an HTTP exception         responseStatus = resp.getcode()         responseMsg = resp.msg         jsonString = resp.read()          # json --> Python; dictionary containing 1 key with a list of lists         results = json.loads(jsonString)          # Check for expired token; Update if expired and try again         if 'error' in results.keys():             if results['error']['message'] == 'Invalid Token':                 AddMsgAndPrint("\tRegenerating ArcGIS Token Information...")                  # Get new ArcPro Token                 newToken = arcpy.GetSigninToken()                  # Update the original portalToken                 global portalToken                 portalToken = newToken                  # convert encoded string into python structure and update token                 # by parsing the encoded query strting into list of (name, value pairs)                 # i.e [('f', 'json'),('token','U62uXB9Qcd1xjyX1)]                 # convert to dictionary and update the token in dictionary                  queryString = parseQueryString(params)                  requestDict = dict(queryString)                 requestDict.update(token=newToken['token'])                  newParams = urllibEncode(requestDict)                 newParams = newParams.encode('ascii')                  # update incoming parameters just in case a 2nd attempt is needed                 INparams = newParams                  resp = urllib.request.urlopen(url,newParams)  # A failure here will probably throw an HTTP exception                  responseStatus = resp.getcode()                 responseMsg = resp.msg                 jsonString = resp.read()                  results = json.loads(jsonString)          # Check results before returning them; Attempt a 2nd request if results are bad.         if 'error' in results.keys() or len(results) == 0:             time.sleep(5)             resp = urllib.request.urlopen(url,INparams)  # A failure here will probably throw an HTTP exception              responseStatus = resp.getcode()             responseMsg = resp.msg             jsonString = resp.read()              results = json.loads(jsonString)              if 'error' in results.keys() or len(results) == 0:                 AddMsgAndPrint("\t2nd Request Attempt Failed - Error Code: " + str(responseStatus) + " -- " + responseMsg + " -- " + str(results),2)                 return False             else:                 return results          else:              return results      except httpErrors as e:          if int(e.code) >= 500:            #AddMsgAndPrint("\n\t\tHTTP ERROR: " + str(e.code) + " ----- Server side error. Probably exceed JSON imposed limit",2)            #AddMsgAndPrint("t\t" + str(request))            pass         elif int(e.code) >= 400:            #AddMsgAndPrint("\n\t\tHTTP ERROR: " + str(e.code) + " ----- Client side error. Check the following SDA Query for errors:",2)            #AddMsgAndPrint("\t\t" + getGeometryQuery)            pass         else:            AddMsgAndPrint('HTTP ERROR = ' + str(e.code),2)      except:         errorMsg()         return False
fsMetadata = submitFSquery(cluRESTurl_Metadata,params)
